package com.example.gdtcontrol

import android.graphics.Bitmap
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.navigationBarsPadding
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.core.text.isDigitsOnly
import androidx.lifecycle.viewModelScope
import com.google.zxing.qrcode.QRCodeWriter
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch


@Composable
fun ProductGeneratorScreen(viewModel: ViewModel) {
    val state = viewModel.state
    val isFormInvisible = viewModel.isFormVisible

    var qrCodeGenerated by remember { mutableStateOf<Bitmap?>(null) }

    var nameError by remember { mutableStateOf(false) }
    var descriptionError by remember { mutableStateOf(false) }
    var stockError by remember { mutableStateOf(false) }
    var stockMaxError by remember { mutableStateOf(false) }
    var stockMinError by remember { mutableStateOf(false) }
    var proveedorError by remember { mutableStateOf(false) }
    var emailProveedorError by remember { mutableStateOf(false) }

    LaunchedEffect(Unit) {
        viewModel.resetForm()
        qrCodeGenerated = null
    }

    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
        if (qrCodeGenerated != null) {
            Image(
                bitmap = qrCodeGenerated!!.asImageBitmap(),
                contentDescription = "",
                modifier = Modifier.size(200.dp)
            )
        } else if (isFormInvisible) {
            LazyColumn(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier
                    .fillMaxSize()
                    .padding(bottom = 16.dp)
                    .navigationBarsPadding(),
                contentPadding = PaddingValues(16.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                item {
                    Text(text = "Generador de Qr code", textAlign = TextAlign.Center)
                }
                item {
                    Icon(
                        painter = painterResource(id = R.drawable.qr),
                        contentDescription = "",
                        modifier = Modifier.size(100.dp)
                    )
                }
                item {
                    Text(text = "Nombre de producto")
                    TextField(
                        value = state.name,
                        onValueChange = { viewModel.onNameChange(it) },
                        keyboardOptions = KeyboardOptions.Default.copy(
                            imeAction = ImeAction.Next
                        ),
                        isError = nameError
                    )
                    if (nameError) {
                        Text(text = "El nombre no puede estar vacío", color = Color.Red)
                    }
                }
                item {
                    Text(text = "Descripción")
                    TextField(
                        value = state.description,
                        onValueChange = { viewModel.onDescriptionChange(it) },
                        keyboardOptions = KeyboardOptions.Default.copy(
                            imeAction = ImeAction.Next
                        ),
                        isError = descriptionError
                    )
                    if (descriptionError) {
                        Text(text = "La descripción no puede estar vacía", color = Color.Red)
                    }
                }
                item {
                    Text(text = "Stock")
                    TextField(
                        value = if (state.stock == 0) "" else state.stock.toString(),
                        onValueChange = {
                            if (it.isDigitsOnly()) viewModel.onStockChange(if (it.isEmpty()) 0 else it.toInt())
                        },
                        keyboardOptions = KeyboardOptions.Default.copy(
                            keyboardType = KeyboardType.Number,
                            imeAction = ImeAction.Next
                        ),
                        isError = stockError
                    )
                    if (stockError) {
                        Text(text = "El stock debe ser mayor que 0", color = Color.Red)
                    }
                }
                item {
                    Text(text = "Stock Maximo")
                    TextField(
                        value = if (state.stockMax == 0) "" else state.stockMax.toString(),
                        onValueChange = {
                            if (it.isDigitsOnly()) viewModel.onStockMaxChange(if (it.isEmpty()) 0 else it.toInt())
                        },
                        keyboardOptions = KeyboardOptions.Default.copy(
                            keyboardType = KeyboardType.Number,
                            imeAction = ImeAction.Next
                        ),
                        isError = stockMaxError
                    )
                    if (stockMaxError) {
                        Text(text = "El stock máximo debe ser mayor que 0", color = Color.Red)
                    }
                }
                item {
                    Text(text = "Stock Minimo")
                    TextField(
                        value = if (state.stockMin == 0) "" else state.stockMin.toString(),
                        onValueChange = {
                            if (it.isDigitsOnly()) viewModel.onStockMinChange(if (it.isEmpty()) 0 else it.toInt())
                        },
                        keyboardOptions = KeyboardOptions.Default.copy(
                            keyboardType = KeyboardType.Number,
                            imeAction = ImeAction.Next
                        ),
                        isError = stockMinError
                    )
                    if (stockMinError) {
                        Text(text = "El stock mínimo no puede ser mayor que el stock máximo ni menor que 0", color = Color.Red)
                    }
                }
                item {
                    Text(text = "Proveedor")
                    TextField(
                        value = state.proveedor,
                        onValueChange = { viewModel.onProveedorChange(it) },
                        keyboardOptions = KeyboardOptions.Default.copy(
                            imeAction = ImeAction.Next
                        ),
                        isError = proveedorError
                    )
                    if (proveedorError) {
                        Text(text = "El proveedor no puede estar vacío", color = Color.Red)
                    }
                }
                item {
                    Text(text = "Email Proveedor")
                    TextField(
                        value = state.emailProveedor,
                        onValueChange = { viewModel.onEmailProveedorChange(it) },
                        keyboardOptions = KeyboardOptions.Default.copy(
                            keyboardType = KeyboardType.Email,
                            imeAction = ImeAction.Done
                        ),
                        isError = emailProveedorError
                    )
                    if (emailProveedorError) {
                        Text(text = "El email no puede estar vacío", color = Color.Red)
                    }
                }
                item {
                    Spacer(modifier = Modifier.height(20.dp))
                    Button(
                        onClick = {

                            nameError = state.name.isBlank()
                            descriptionError = state.description.isBlank()
                            stockError = state.stock <= 1
                            stockMaxError = state.stockMax <= 1
                            stockMinError = state.stockMin < 0 || state.stockMin > state.stockMax
                            proveedorError = state.proveedor.isBlank()
                            emailProveedorError = state.emailProveedor.isBlank()

                            if (!nameError && !descriptionError && !stockError && !stockMaxError && !stockMinError && !proveedorError && !emailProveedorError) {
                                viewModel.viewModelScope.launch {
                                    viewModel.addProduct()
                                    delay(200)
                                    val lastProductId = viewModel.getLastProductId()
                                    qrCodeGenerated = qrcodeGenerator(text = lastProductId.toString())
                                    viewModel.changeVisibility()
                                }
                            }
                        },
                        modifier = Modifier.padding(bottom = 16.dp)
                    ) {
                        Text(text = "Agregar Producto")
                    }
                }
            }
        }
    }
}









fun qrcodeGenerator(text: String): Bitmap {
    val matrix = QRCodeWriter().encode(text, com.google.zxing.BarcodeFormat.QR_CODE, 512, 512)
    val w = matrix.width
    val h = matrix.height

    val bitmap = Bitmap.createBitmap(w, h, Bitmap.Config.RGB_565)

    for (y in 0 until h) {
        for (x in 0 until w) {
            bitmap.setPixel(
                x,
                y,
                if (matrix[x, y]) android.graphics.Color.BLACK else android.graphics.Color.WHITE
            )
        }
    }
    return bitmap
}
