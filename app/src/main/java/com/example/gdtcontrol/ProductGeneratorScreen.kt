package com.example.gdtcontrol

import android.graphics.Bitmap
import android.graphics.Color
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.google.zxing.qrcode.QRCodeWriter

@Preview(showBackground = true)
@Composable
fun ProductGeneratorScreen() {
    var text by remember { mutableStateOf("") }
    var qrCodeGenerated by remember { mutableStateOf<Bitmap?>(null) }
    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            Text(text = "Generador de Qr code", textAlign = TextAlign.Center)
            if (qrCodeGenerated != null) {
                Image(
                    bitmap = qrCodeGenerated!!.asImageBitmap(),
                    contentDescription = "",
                    modifier = Modifier.size(200.dp)
                )
            } else {
                Icon(
                    painter = painterResource(id = R.drawable.qr),
                    contentDescription = "",
                    modifier = Modifier.size(100.dp)
                )
            }

            TextField(value = text, onValueChange = { text = it })
            Spacer(modifier = Modifier.height(20.dp))

            Button(onClick = {qrCodeGenerated = qrcodeGenerator(text = text) }) {
                Text(text = "Generar Codigo")
            }
        }
    }
}


@Composable
fun RoundedButton(onClick: () -> Unit, enabled: Boolean, color: Color, text: String) {
    Button(
        onClick = onClick,
        enabled = enabled,
        shape = RoundedCornerShape(10.dp),
        colors = ButtonDefaults.buttonColors()
    ) {
        Text(text = text, modifier = Modifier.padding(vertical = 7.dp))
    }
}



fun qrcodeGenerator(text: String): Bitmap {
    val matrix = QRCodeWriter().encode(text, com.google.zxing.BarcodeFormat.QR_CODE, 512, 512)
    val w = matrix.width
    val h = matrix.height

    val bitmap = Bitmap.createBitmap(w, h, Bitmap.Config.RGB_565)

    for (y in 0 until h) {
        for (x in 0 until w) {
            bitmap.setPixel(
                x,
                y,
                if (matrix[x, y]) android.graphics.Color.BLACK else android.graphics.Color.WHITE
            )
        }
    }
    return bitmap
}
