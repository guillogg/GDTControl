package com.example.gdtcontrol

import android.graphics.Bitmap
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewModelScope
import com.google.zxing.qrcode.QRCodeWriter
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch


@Composable
fun ProductGeneratorScreen(viewModel: ViewModel) {

    val state = viewModel.state
    var qrCodeGenerated by remember { mutableStateOf<Bitmap?>(null) }
    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            Text(text = "Generador de Qr code", textAlign = TextAlign.Center)
            if (qrCodeGenerated != null) {
                Image(
                    bitmap = qrCodeGenerated!!.asImageBitmap(),
                    contentDescription = "",
                    modifier = Modifier.size(200.dp)
                )
            } else {
                Icon(
                    painter = painterResource(id = R.drawable.qr),
                    contentDescription = "",
                    modifier = Modifier.size(100.dp)
                )
                Text(text = "Nombre de producto")
                TextField(value = state.name, onValueChange = { viewModel.onNameChange(it) })
                Text(text = "Descripci√≥n")
                TextField(
                    value = state.description,
                    onValueChange = { viewModel.onDescriptionChange(it) })
                Text(text = "Stock")
                TextField(
                    value = state.stock.toString(),
                    onValueChange = { viewModel.onStockChange(it.toInt()) },
                    keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Number)
                )
                Text(text = "Stock Maximo")
                TextField(
                    value = state.stockMax.toString(),
                    onValueChange = { viewModel.onStockMaxChange(it.toInt()) },
                    keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Number)
                )
                Text(text = "Stock Minimo")
                TextField(
                    value = state.stockMin.toString(),
                    onValueChange = { viewModel.onStockMinChange(it.toInt()) },
                    keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Number)
                )
                Text(text = "Proveedor")
                TextField(
                    value = state.proveedor,
                    onValueChange = { viewModel.onProveedorChange(it) })
                Text(text = "Email Proveedor")
                TextField(
                    value = state.emailProveedor,
                    onValueChange = { viewModel.onEmailProveedorChange(it) },
                    keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Email)
                )
                Spacer(modifier = Modifier.height(20.dp))

                /*Button(onClick = { qrCodeGenerated = qrcodeGenerator(text = text) }) {
                    Text(text = "Agregar Producto")
                }*/
                Button(onClick = {
                    viewModel.viewModelScope.launch {
                        viewModel.addProduct()
                        delay(200)
                        val lastProductId = viewModel.getLastProductId()

                        qrCodeGenerated = qrcodeGenerator(text = lastProductId.toString())
                    }
                }) {
                    Text(text = "Agregar Producto")
                }

            }


        }
    }
}


fun qrcodeGenerator(text: String): Bitmap {
    val matrix = QRCodeWriter().encode(text, com.google.zxing.BarcodeFormat.QR_CODE, 512, 512)
    val w = matrix.width
    val h = matrix.height

    val bitmap = Bitmap.createBitmap(w, h, Bitmap.Config.RGB_565)

    for (y in 0 until h) {
        for (x in 0 until w) {
            bitmap.setPixel(
                x,
                y,
                if (matrix[x, y]) android.graphics.Color.BLACK else android.graphics.Color.WHITE
            )
        }
    }
    return bitmap
}
